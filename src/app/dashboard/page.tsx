'use client';

import { RequireAuth } from '@/components/AuthGuard';
import ClientDashboard from './ClientDashboard';
import AdminDashboard from './AdminDashboard';
import { useUser } from '@/hooks/useUser';
import { useState, useEffect } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import { Button } from '@/components/ui/button';
import Link from 'next/link';

interface MatchRecord {
  id: string;
  matchNumber: number;
  date: string;
  result: 'win' | 'loss' | 'pending';
  score: string;
  teammates: string[];
  opponents: string[];
  isUserTeam1: boolean;
}

interface MatchHistory {
  id: string;
  match_date: string;
  match_number: number;
  session_name: string;
  result: 'win' | 'lose' | 'pending';
  score: string;
  my_team: 'team1' | 'team2';
  teammates: {
    id: string;
    name: string;
    skill_level: string;
  }[];
  opponents: {
    id: string;
    name: string;
    skill_level: string;
  }[];
  completed_at?: string;
}

interface WinLossStats {
  totalMatches: number;
  wins: number;
  losses: number;
  winRate: number;
}

interface RankingStats {
  userId: string;
  name: string;
  skill_level: string;
  wins: number;
  totalMatches: number;
  winRate: number;
  attendanceCount: number;
}

interface OpponentStats extends WinLossStats {
  opponentName: string;
  opponentId: string;
  skill_level: string;
}

export default function DashboardPage() {
  const { user, profile, loading: userLoading, isAdmin } = useUser();
  const supabase = createClientComponentClient();
  
  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'stats' | 'history' | 'search'>('stats'); // statsÎ•º Ï≤´ Î≤àÏß∏Î°ú Î≥ÄÍ≤Ω
  const [matchHistory, setMatchHistory] = useState<MatchHistory[]>([]);
  const [matchRecords, setMatchRecords] = useState<MatchRecord[]>([]);
  const [filteredRecords, setFilteredRecords] = useState<MatchRecord[]>([]);
  const [selectedDate, setSelectedDate] = useState<string>('');
  const [myStats, setMyStats] = useState<WinLossStats>({ totalMatches: 0, wins: 0, losses: 0, winRate: 0 });
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<OpponentStats[]>([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const [winRanking, setWinRanking] = useState<RankingStats[]>([]);
  const [attendanceRanking, setAttendanceRanking] = useState<RankingStats[]>([]);

  // ÎÇ†Ïßú ÌïÑÌÑ∞ Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleDateFilter = (date: string) => {
    setSelectedDate(date);
    if (date === '') {
      setFilteredRecords(matchRecords);
    } else {
      const filtered = matchRecords.filter(record => record.date === date);
      setFilteredRecords(filtered);
    }
  };

  // Îû≠ÌÇπ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
  const fetchRankings = async () => {
    try {
      // 1. ÏäπÎ•† Îû≠ÌÇπ Ï°∞Ìöå
      const { data: allProfiles, error: profileError } = await supabase
        .from('profiles')
        .select('id, user_id, username, full_name, skill_level')
        .not('username', 'is', null)
        .not('full_name', 'is', null);

      if (profileError) {
        console.error('ÌîÑÎ°úÌïÑ Ï°∞Ìöå Ïã§Ìå®:', profileError);
        return;
      }

      const rankingData: RankingStats[] = [];

      // Í∞Å ÌîÑÎ°úÌïÑÏùò Í≤ΩÍ∏∞ ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
      for (const profile of allProfiles || []) {
        const { data: matches, error } = await supabase
          .from('generated_matches')
          .select('match_result, team1_player1_id, team1_player2_id, team2_player1_id, team2_player2_id')
          .or(`team1_player1_id.eq.${profile.id},team1_player2_id.eq.${profile.id},team2_player1_id.eq.${profile.id},team2_player2_id.eq.${profile.id}`)
          .eq('status', 'completed')
          .not('match_result', 'is', null);

        if (error) continue;

        let wins = 0;
        let totalMatches = 0;

        matches?.forEach((match) => {
          const result = match.match_result as any;
          if (!result?.winner) return;

          totalMatches++;
          const isTeam1 = match.team1_player1_id === profile.id || match.team1_player2_id === profile.id;
          const myTeam = isTeam1 ? 'team1' : 'team2';
          
          if (result.winner === myTeam) {
            wins++;
          }
        });

        // Ï∂úÏÑù ÌÜµÍ≥Ñ Ï°∞Ìöå
        const { data: attendances, error: attendanceError } = await supabase
          .from('attendances')
          .select('id')
          .eq('user_id', profile.user_id)
          .in('status', ['Ï∂úÏÑù', 'Î†àÏä®']);

        const attendanceCount = attendances?.length || 0;

        if (totalMatches > 0) {
          rankingData.push({
            userId: profile.user_id,
            name: profile.username || profile.full_name || 'Ïù¥Î¶ÑÏóÜÏùå',
            skill_level: profile.skill_level || 'E2',
            wins,
            totalMatches,
            winRate: Math.round((wins / totalMatches) * 100),
            attendanceCount
          });
        }
      }

      // ÏäπÎ•† Îû≠ÌÇπ (ÏµúÏÜå 3Í≤ΩÍ∏∞ Ïù¥ÏÉÅ, ÏäπÎ•† ÎÜíÏùÄ Ïàú)
      const winRankingFiltered = rankingData
        .filter(player => player.totalMatches >= 3)
        .sort((a, b) => {
          if (b.winRate === a.winRate) return b.wins - a.wins; // ÏäπÎ•† Í∞ôÏúºÎ©¥ ÏäπÏàòÎ°ú
          return b.winRate - a.winRate;
        })
        .slice(0, 5);

      // Ï∂úÏÑù Îû≠ÌÇπ (Ï∂úÏÑù Ïàò ÎÜíÏùÄ Ïàú)
      const attendanceRankingFiltered = rankingData
        .filter(player => player.attendanceCount > 0)
        .sort((a, b) => b.attendanceCount - a.attendanceCount)
        .slice(0, 5);

      setWinRanking(winRankingFiltered);
      setAttendanceRanking(attendanceRankingFiltered);

    } catch (error) {
      console.error('Îû≠ÌÇπ Ï°∞Ìöå Ïã§Ìå®:', error);
    }
  };

  // ÎÇ¥ Í≤ΩÍ∏∞ ÎÇ¥Ïó≠ Ï°∞Ìöå
  const fetchMatchHistory = async () => {
    if (!user || !profile) return;
    
    console.log('üîç ÎÇ¥ Í≤ΩÍ∏∞ ÎÇ¥Ïó≠ Ï°∞Ìöå ÏãúÏûë...');
    setLoading(true);

    try {
      // ÎÇ¥ ÌîÑÎ°úÌïÑ IDÎ°ú Ï∞∏Ïó¨Ìïú Î™®Îì† generated_matches Ï°∞Ìöå
      const { data: matches, error } = await supabase
        .from('generated_matches')
        .select(`
          id,
          match_number,
          status,
          match_result,
          created_at,
          team1_player1:profiles!team1_player1_id(id, user_id, username, full_name, skill_level),
          team1_player2:profiles!team1_player2_id(id, user_id, username, full_name, skill_level),
          team2_player1:profiles!team2_player1_id(id, user_id, username, full_name, skill_level),
          team2_player2:profiles!team2_player2_id(id, user_id, username, full_name, skill_level),
          match_sessions(
            session_name,
            session_date
          )
        `)
        .or(`team1_player1_id.eq.${profile.id},team1_player2_id.eq.${profile.id},team2_player1_id.eq.${profile.id},team2_player2_id.eq.${profile.id}`)
        .eq('status', 'completed')
        .not('match_result', 'is', null)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Í≤ΩÍ∏∞ ÎÇ¥Ïó≠ Ï°∞Ìöå Ïã§Ìå®:', error);
        return;
      }

      console.log('Ï°∞ÌöåÎêú Í≤ΩÍ∏∞ Ïàò:', matches?.length || 0);

      // Í≤ΩÍ∏∞ ÎÇ¥Ïó≠ Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò
      const historyData: MatchHistory[] = [];
      const records: MatchRecord[] = [];
      let totalWins = 0;
      let totalLosses = 0;

      matches?.forEach((match) => {
        if (!match.match_result) return;

        const result = match.match_result as any;
        const session = match.match_sessions?.[0];
        
        // ÎÇ¥Í∞Ä Ïñ¥Îäê ÌåÄÏù∏ÏßÄ ÌôïÏù∏
        const isTeam1 = match.team1_player1?.user_id === user.id || match.team1_player2?.user_id === user.id;
        const myTeam = isTeam1 ? 'team1' : 'team2';
        
        // ÏäπÌå® Í≤∞Ï†ï
        const matchResult = result.winner === myTeam ? 'win' : 'lose';
        if (matchResult === 'win') totalWins++;
        else totalLosses++;

        // ÌåÄÎ©îÏù¥Ìä∏ÏôÄ ÏÉÅÎåÄÎ∞© Ï†ïÎ≥¥
        const teammates = isTeam1 
          ? [match.team1_player1, match.team1_player2].filter(p => p?.user_id !== user.id)
          : [match.team2_player1, match.team2_player2].filter(p => p?.user_id !== user.id);
        
        const opponents = isTeam1
          ? [match.team2_player1, match.team2_player2]
          : [match.team1_player1, match.team1_player2];

        const matchDate = session?.session_date || match.created_at.split('T')[0];

        // Í∏∞Ï°¥ ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ (MatchHistory)
        historyData.push({
          id: match.id,
          match_date: matchDate,
          match_number: match.match_number,
          session_name: session?.session_name || 'ÏÑ∏ÏÖò Ï†ïÎ≥¥ ÏóÜÏùå',
          result: matchResult,
          score: result.score || 'Ï†êÏàò ÏóÜÏùå',
          my_team: myTeam,
          teammates: teammates.map(p => ({
            id: p?.id || '',
            name: p?.username || p?.full_name || 'ÎØ∏Ï†ï',
            skill_level: p?.skill_level || 'E2'
          })),
          opponents: opponents.map(p => ({
            id: p?.id || '',
            name: p?.username || p?.full_name || 'ÎØ∏Ï†ï',
            skill_level: p?.skill_level || 'E2'
          })),
          completed_at: result.completed_at
        });

        // ÌÖåÏù¥Î∏îÏö© Í∞ÑÎã®Ìïú Îç∞Ïù¥ÌÑ∞ (MatchRecord)
        const getPlayerNames = (players: any[]) => 
          players
            .filter(p => p && p.user_id !== user.id) // ÎÇò Ï†úÏô∏
            .map(p => p.username || p.full_name || 'ÎØ∏Ï†ï');

        records.push({
          id: match.id,
          matchNumber: match.match_number,
          date: matchDate,
          result: matchResult === 'win' ? 'win' : 'loss',
          score: result.score || '',
          teammates: getPlayerNames(teammates),
          opponents: getPlayerNames(opponents),
          isUserTeam1: isTeam1
        });
      });

      setMatchHistory(historyData);
      setMatchRecords(records);
      setFilteredRecords(records);
      
      // ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
      const totalMatches = totalWins + totalLosses;
      const winRate = totalMatches > 0 ? Math.round((totalWins / totalMatches) * 100) : 0;
      
      setMyStats({
        totalMatches,
        wins: totalWins,
        losses: totalLosses,
        winRate
      });

      console.log(`‚úÖ Í≤ΩÍ∏∞ ÎÇ¥Ïó≠ Ï°∞Ìöå ÏôÑÎ£å: ${historyData.length}Í≤ΩÍ∏∞`);
      
    } catch (error) {
      console.error('Í≤ΩÍ∏∞ ÎÇ¥Ïó≠ Ï°∞Ìöå Ï§ë Ïò§Î•ò:', error);
    } finally {
      setLoading(false);
    }
  };

  // ÏÉÅÎåÄÎ∞© Í≤ÄÏÉâ
  const searchOpponent = async () => {
    if (!searchQuery.trim() || !user || !profile) return;
    
    setSearchLoading(true);
    try {
      // Í≤ÄÏÉâÏñ¥Î°ú ÌîÑÎ°úÌïÑ Ï∞æÍ∏∞
      const { data: searchProfiles, error: searchError } = await supabase
        .from('profiles')
        .select('id, user_id, username, full_name, skill_level')
        .or(`username.ilike.%${searchQuery}%,full_name.ilike.%${searchQuery}%`)
        .neq('user_id', user.id) // Î≥∏Ïù∏ Ï†úÏô∏
        .limit(10);

      if (searchError) {
        console.error('ÏÉÅÎåÄÎ∞© Í≤ÄÏÉâ Ïã§Ìå®:', searchError);
        return;
      }

      const opponentStats: OpponentStats[] = [];

      // Í∞Å Í≤ÄÏÉâÎêú ÌîÑÎ°úÌïÑÏóê ÎåÄÌï¥ ÏäπÎ∂Ä Í∏∞Î°ù Í≥ÑÏÇ∞
      for (const opponent of searchProfiles || []) {
        console.log(`üîç ${opponent.username || opponent.full_name}Í≥ºÏùò Í≤ΩÍ∏∞ Ï°∞Ìöå Ï§ë...`);
        
        // Ìï¥Îãπ ÏÉÅÎåÄÎ∞©Í≥º Ìï®ÍªòÌïú Í≤ΩÍ∏∞Îì§ Ï°∞Ìöå (ÏàòÏ†ïÎêú ÏøºÎ¶¨)
        const { data: vsMatches, error: vsError } = await supabase
          .from('generated_matches')
          .select(`
            id,
            match_result,
            team1_player1_id,
            team1_player2_id,
            team2_player1_id,
            team2_player2_id
          `)
          .eq('status', 'completed')
          .not('match_result', 'is', null)
          .or(`team1_player1_id.eq.${profile.id},team1_player2_id.eq.${profile.id},team2_player1_id.eq.${profile.id},team2_player2_id.eq.${profile.id}`)
          .or(`team1_player1_id.eq.${opponent.id},team1_player2_id.eq.${opponent.id},team2_player1_id.eq.${opponent.id},team2_player2_id.eq.${opponent.id}`);

        if (vsError) {
          console.error(`${opponent.username}Í≥ºÏùò Í≤ΩÍ∏∞ Ï°∞Ìöå Ïã§Ìå®:`, vsError);
          continue;
        }
        
        console.log(`üìä ${opponent.username || opponent.full_name}Í≥ºÏùò Í≤ΩÍ∏∞ Ïàò: ${vsMatches?.length || 0}`);

        let wins = 0;
        let losses = 0;

        // Í∞Å Í≤ΩÍ∏∞ÏóêÏÑú ÏäπÌå® Í≥ÑÏÇ∞ (ÎÇòÏôÄ ÏÉÅÎåÄÎ∞©Ïù¥ Ìï®Íªò ÏûàÎäî Í≤ΩÍ∏∞Îßå)
        vsMatches?.forEach((match) => {
          const result = match.match_result as any;
          if (!result?.winner) return;

          // ÎÇ¥Í∞Ä Ïñ¥Îäê ÌåÄÏù∏ÏßÄ ÌôïÏù∏
          const isMyTeam1 = match.team1_player1_id === profile.id || match.team1_player2_id === profile.id;
          const myTeam = isMyTeam1 ? 'team1' : 'team2';
          
          // ÏÉÅÎåÄÎ∞©Ïù¥ Ïñ¥Îäê ÌåÄÏù∏ÏßÄ ÌôïÏù∏
          const isOpponentTeam1 = match.team1_player1_id === opponent.id || match.team1_player2_id === opponent.id;
          const opponentTeam = isOpponentTeam1 ? 'team1' : 'team2';
          
          // ÎÇòÏôÄ ÏÉÅÎåÄÎ∞©Ïù¥ Í∞ôÏùÄ Í≤ΩÍ∏∞Ïóê ÏûàÏßÄÎßå Îã§Î•∏ ÌåÄÏóê ÏûàÎäî Í≤ΩÏö∞Îßå Í≥ÑÏÇ∞
          if (myTeam !== opponentTeam) {
            if (result.winner === myTeam) {
              wins++;
            } else {
              losses++;
            }
          }
        });

        console.log(`üèÜ ${opponent.username || opponent.full_name}: ${wins}Ïäπ ${losses}Ìå®`);

        const totalMatches = wins + losses;
        if (totalMatches > 0) {
          opponentStats.push({
            opponentName: opponent.username || opponent.full_name || 'Ïù¥Î¶Ñ ÏóÜÏùå',
            opponentId: opponent.id,
            skill_level: opponent.skill_level || 'E2',
            totalMatches,
            wins,
            losses,
            winRate: Math.round((wins / totalMatches) * 100)
          });
        }
      }

      // Í≤ΩÍ∏∞ ÏàòÍ∞Ä ÎßéÏùÄ ÏàúÏúºÎ°ú Ï†ïÎ†¨
      opponentStats.sort((a, b) => b.totalMatches - a.totalMatches);
      setSearchResults(opponentStats);
      
    } catch (error) {
      console.error('ÏÉÅÎåÄÎ∞© Í≤ÄÏÉâ Ï§ë Ïò§Î•ò:', error);
    } finally {
      setSearchLoading(false);
    }
  };

  useEffect(() => {
    if (user && profile) {
      fetchMatchHistory();
      fetchRankings(); // Îû≠ÌÇπ Îç∞Ïù¥ÌÑ∞ÎèÑ Ìï®Íªò Ï°∞Ìöå
    }
  }, [user, profile]);

  // Î°úÎî© Ï§ë
  if (userLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  // ÎØ∏Î°úÍ∑∏Ïù∏
  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <p className="mb-4">Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.</p>
          <Link href="/login">
            <Button>Î°úÍ∑∏Ïù∏ÌïòÍ∏∞</Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 min-h-screen">
      {/* ÏÉÅÎã® Ìó§Îçî */}
      <div className="bg-gradient-to-r from-purple-500 to-pink-600 rounded-lg shadow-md p-6 mb-8 text-white">
        <div className="flex items-center justify-between mb-2">
          <h1 className="text-2xl font-semibold flex items-center gap-2">
            üèÜ ÎÇòÏùò Í≤ΩÍ∏∞ ÌòÑÌô©         </h1>
          <Link href="/" className="text-white hover:text-purple-100 transition-colors">
            üè† Ìôà
          </Link>
        </div>
        <div className="flex items-center gap-4 text-sm mb-4">
          <span className="bg-purple-200 text-purple-800 px-3 py-1 rounded-full">
            {profile?.username || profile?.full_name || 'ÌöåÏõê'}Îãò
          </span>
          <span className="bg-white bg-opacity-20 text-white px-3 py-1 rounded-full">
            Î†àÎ≤®: {profile?.skill_level}Í∏â
          </span>
        </div>
        <p className="text-purple-100">
          ÎÇòÏùò Í≤ΩÍ∏∞ Í∏∞Î°ùÍ≥º ÌÜµÍ≥ÑÎ•º ÌôïÏù∏ÌïòÍ≥† ÏÉÅÎåÄÎ∞©Î≥Ñ ÏäπÎ∂Ä Í∏∞Î°ùÏùÑ Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî! üìä
        </p>
      </div>

      {/* ÌÉ≠ Î©îÎâ¥ */}
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="flex border-b border-gray-200">
          <button
            onClick={() => setActiveTab('stats')}
            className={`flex-1 px-6 py-3 text-center font-medium transition-colors ${
              activeTab === 'stats'
                ? 'text-purple-600 border-b-2 border-purple-600 bg-purple-50'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            ÔøΩ ÏäπÎ•†
          </button>
          <button
            onClick={() => setActiveTab('history')}
            className={`flex-1 px-6 py-3 text-center font-medium transition-colors ${
              activeTab === 'history'
                ? 'text-purple-600 border-b-2 border-purple-600 bg-purple-50'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            ÔøΩ ÎÇ¥Ïó≠
          </button>
          <button
            onClick={() => setActiveTab('search')}
            className={`flex-1 px-6 py-3 text-center font-medium transition-colors ${
              activeTab === 'search'
                ? 'text-purple-600 border-b-2 border-purple-600 bg-purple-50'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            üîç Í≤ÄÏÉâ
          </button>
        </div>

        {/* ÌÉ≠ ÎÇ¥Ïö© */}
        <div className="p-6">
          {/* ÏäπÎ•† ÌÜµÍ≥Ñ ÌÉ≠ */}
          {activeTab === 'stats' && (
            <div>
              <h2 className="text-xl font-semibold mb-6 text-gray-900">üìä ÎÇòÏùò ÏäπÎ•† ÌÜµÍ≥Ñ</h2>
              
              <div className="grid grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <div className="bg-blue-50 p-6 rounded-lg text-center">
                  <div className="text-3xl font-bold text-blue-900 mb-2">{myStats.totalMatches}</div>
                  <div className="text-blue-600">Ï¥ù Í≤ΩÍ∏∞Ïàò</div>
                </div>
                <div className="bg-green-50 p-6 rounded-lg text-center">
                  <div className="text-3xl font-bold text-green-900 mb-2">{myStats.wins}</div>
                  <div className="text-green-600">ÏäπÎ¶¨</div>
                </div>
                <div className="bg-red-50 p-6 rounded-lg text-center">
                  <div className="text-3xl font-bold text-red-900 mb-2">{myStats.losses}</div>
                  <div className="text-red-600">Ìå®Î∞∞</div>
                </div>
                <div className="bg-purple-50 p-6 rounded-lg text-center">
                  <div className="text-3xl font-bold text-purple-900 mb-2">{myStats.winRate}%</div>
                  <div className="text-purple-600">ÏäπÎ•†</div>
                </div>
              </div>

              {/* ÏäπÎ•† Í∑∏ÎûòÌîÑ */}
              {myStats.totalMatches > 0 && (
                <div className="bg-gray-50 p-6 rounded-lg mb-6">
                  <h3 className="text-lg font-semibold mb-4">ÏäπÎ∂Ä Í∏∞Î°ù</h3>
                  <div className="flex items-center gap-4 mb-3">
                    <div className="flex-1 bg-gray-200 rounded-full h-6 overflow-hidden">
                      <div 
                        className="h-full bg-gradient-to-r from-green-400 to-green-600 transition-all duration-500"
                        style={{ width: `${myStats.winRate}%` }}
                      ></div>
                    </div>
                    <span className="text-sm font-medium text-gray-700">{myStats.winRate}%</span>
                  </div>
                  <div className="flex justify-between text-sm text-gray-600">
                    <span>üèÜ {myStats.wins}Ïäπ</span>
                    <span>üòî {myStats.losses}Ìå®</span>
                  </div>
                </div>
              )}

              {/* ÏäπÎ•† ÌèâÍ∞Ä */}
              {myStats.totalMatches > 0 && (
                <div className="p-4 bg-purple-50 rounded-lg mb-8">
                  <h4 className="font-semibold text-purple-800 mb-2">üìà ÏäπÎ•† ÌèâÍ∞Ä</h4>
                  <p className="text-purple-700">
                    {myStats.winRate >= 70 ? 'üî• Ïö∞ÏàòÌïú ÏÑ±Í≥ºÏûÖÎãàÎã§!' :
                     myStats.winRate >= 50 ? 'üëç Ï¢ãÏùÄ ÏÑ±Í≥ºÏûÖÎãàÎã§!' :
                     'üí™ Îçî Ï¢ãÏùÄ Í≤∞Í≥ºÎ•º ÏúÑÌï¥ ÌôîÏù¥ÌåÖ!'}
                  </p>
                </div>
              )}

              {/* Îû≠ÌÇπ ÏÑπÏÖò */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* ÏäπÎ•† Îû≠ÌÇπ */}
                <div className="bg-white border rounded-lg p-6">
                  <h3 className="text-lg font-semibold mb-4 text-green-700 flex items-center gap-2">
                    üèÜ ÏäπÎ•† Îû≠ÌÇπ TOP 5
                  </h3>
                  {winRanking.length > 0 ? (
                    <div className="space-y-3">
                      {winRanking.map((player, index) => (
                        <div key={player.userId} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center gap-3">
                            <div className={`w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold ${
                              index === 0 ? 'bg-yellow-400 text-yellow-900' :
                              index === 1 ? 'bg-gray-300 text-gray-700' :
                              index === 2 ? 'bg-orange-400 text-orange-900' :
                              'bg-blue-100 text-blue-700'
                            }`}>
                              {index + 1}
                            </div>
                            <div>
                              <div className="font-medium text-gray-900">{player.name}</div>
                              <div className="text-sm text-gray-500">{player.skill_level}Í∏â</div>
                            </div>
                          </div>
                          <div className="text-right">
                            <div className="font-bold text-green-600">{player.winRate}%</div>
                            <div className="text-sm text-gray-500">{player.wins}Ïäπ/{player.totalMatches}Í≤ΩÍ∏∞</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-4 text-gray-500">
                      <div className="text-4xl mb-2">üè∏</div>
                      <p>Ï∂©Î∂ÑÌïú Í≤ΩÍ∏∞ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§</p>
                      <p className="text-sm">(ÏµúÏÜå 3Í≤ΩÍ∏∞ ÌïÑÏöî)</p>
                    </div>
                  )}
                </div>

                {/* Ï∂úÏÑù Îû≠ÌÇπ */}
                <div className="bg-white border rounded-lg p-6">
                  <h3 className="text-lg font-semibold mb-4 text-blue-700 flex items-center gap-2">
                    üìÖ Ï∂úÏÑù Îû≠ÌÇπ TOP 5
                  </h3>
                  {attendanceRanking.length > 0 ? (
                    <div className="space-y-3">
                      {attendanceRanking.map((player, index) => (
                        <div key={player.userId} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center gap-3">
                            <div className={`w-6 h-6 rounded-full flex items-center justify-center text-sm font-bold ${
                              index === 0 ? 'bg-yellow-400 text-yellow-900' :
                              index === 1 ? 'bg-gray-300 text-gray-700' :
                              index === 2 ? 'bg-orange-400 text-orange-900' :
                              'bg-blue-100 text-blue-700'
                            }`}>
                              {index + 1}
                            </div>
                            <div>
                              <div className="font-medium text-gray-900">{player.name}</div>
                              <div className="text-sm text-gray-500">{player.skill_level}Í∏â</div>
                            </div>
                          </div>
                          <div className="text-right">
                            <div className="font-bold text-blue-600">{player.attendanceCount}Ìöå</div>
                            <div className="text-sm text-gray-500">Ï∂úÏÑù</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-4 text-gray-500">
                      <div className="text-4xl mb-2">üìÖ</div>
                      <p>Ï∂úÏÑù Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Í≤ΩÍ∏∞ ÎÇ¥Ïó≠ ÌÉ≠ */}
          {activeTab === 'history' && (
            <div>
              <h2 className="text-xl font-semibold mb-4 text-gray-900">üìã ÎÇ¥ Í≤ΩÍ∏∞ ÎÇ¥Ïó≠</h2>
              
              {/* ÎÇ†Ïßú ÌïÑÌÑ∞ */}
              <div className="mb-6 flex items-center gap-3">
                <label className="text-sm font-medium text-gray-700">ÎÇ†Ïßú ÌïÑÌÑ∞:</label>
                <input
                  type="date"
                  value={selectedDate}
                  onChange={(e) => handleDateFilter(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
                {selectedDate && (
                  <button
                    onClick={() => handleDateFilter('')}
                    className="px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-md transition-colors"
                  >
                    Ï†ÑÏ≤¥ Î≥¥Í∏∞
                  </button>
                )}
              </div>

              {/* Í≤ΩÍ∏∞ ÎÇ¥Ïó≠ ÌÖåÏù¥Î∏î */}
              {loading ? (
                <div className="text-center py-12">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500 mx-auto mb-4"></div>
                  <p>Í≤ΩÍ∏∞ ÎÇ¥Ïó≠ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
                </div>
              ) : filteredRecords.length === 0 ? (
                <div className="text-center py-12">
                  <div className="text-6xl mb-4">üè∏</div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    {selectedDate ? 'ÏÑ†ÌÉùÌïú ÎÇ†ÏßúÏóê Í≤ΩÍ∏∞ ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§' : 'ÏïÑÏßÅ ÏôÑÎ£åÎêú Í≤ΩÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§'}
                  </h3>
                  <p className="text-gray-600">
                    {selectedDate ? 'Îã§Î•∏ ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌï¥Î≥¥ÏÑ∏Ïöî.' : 'Í≤ΩÍ∏∞Î•º ÏôÑÎ£åÌïòÎ©¥ Í≤∞Í≥ºÍ∞Ä Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§.'}
                  </p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="w-full bg-white rounded-lg border">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Í≤ΩÍ∏∞Î≤àÌò∏
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Í≤ΩÍ∏∞Ïùº
                        </th>
                        <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                          ÏäπÌå®
                        </th>
                        <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Ï†êÏàò
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          ÌååÌä∏ÎÑà
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          ÏÉÅÎåÄÎ∞©1
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          ÏÉÅÎåÄÎ∞©2
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {filteredRecords.map((record) => (
                        <tr key={record.id} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            #{record.matchNumber}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {new Date(record.date).toLocaleDateString('ko-KR', {
                              month: 'short',
                              day: 'numeric'
                            })}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-center">
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                              record.result === 'win' 
                                ? 'bg-green-100 text-green-800' 
                                : 'bg-red-100 text-red-800'
                            }`}>
                              {record.result === 'win' ? 'üèÜ Ïäπ' : 'üòû Ìå®'}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-center font-mono">
                            {record.score}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {record.teammates[0] || '-'}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {record.opponents[0] || '-'}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {record.opponents[1] || '-'}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          )}

          {/* ÏÉÅÎåÄÎ∞© Í≤ÄÏÉâ ÌÉ≠ */}
          {activeTab === 'search' && (
            <div>
              <h2 className="text-xl font-semibold mb-6 text-gray-900">üîç ÏÉÅÎåÄÎ∞©Î≥Ñ ÏäπÎ∂Ä Í∏∞Î°ù</h2>
              
              {/* Í≤ÄÏÉâ ÏûÖÎ†• */}
              <div className="flex gap-3 mb-6">
                <input
                  type="text"
                  placeholder="ÏÉÅÎåÄÎ∞© Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && searchOpponent()}
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                />
                <Button onClick={searchOpponent} disabled={searchLoading || !searchQuery.trim()}>
                  {searchLoading ? 'Í≤ÄÏÉâ Ï§ë...' : 'üîç Í≤ÄÏÉâ'}
                </Button>
              </div>

              {/* Í≤ÄÏÉâ Í≤∞Í≥º */}
              {searchResults.length > 0 && (
                <div className="space-y-4">
                  <h3 className="text-lg font-medium text-gray-900">Í≤ÄÏÉâ Í≤∞Í≥º</h3>
                  {searchResults.map((opponent) => (
                    <div key={opponent.opponentId} className="bg-gray-50 rounded-lg p-4 border border-gray-200">
                      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h4 className="text-lg font-semibold text-gray-900">{opponent.opponentName}</h4>
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded">
                              {opponent.skill_level}Í∏â
                            </span>
                          </div>
                          <div className="text-sm text-gray-600">
                            Ï¥ù {opponent.totalMatches}Í≤ΩÍ∏∞ | {opponent.wins}Ïäπ {opponent.losses}Ìå®
                          </div>
                        </div>
                        
                        <div className="text-right">
                          <div className={`text-2xl font-bold mb-1 ${
                            opponent.winRate >= 50 ? 'text-green-600' : 'text-red-600'
                          }`}>
                            {opponent.winRate}%
                          </div>
                          <div className="text-sm text-gray-500">
                            {opponent.winRate >= 50 ? 'Ïö∞ÏÑ∏' : 'Ïó¥ÏÑ∏'}
                          </div>
                        </div>
                      </div>

                      {/* ÏäπÎ•† Î∞î */}
                      <div className="mt-3 flex items-center gap-2">
                        <div className="flex-1 bg-gray-200 rounded-full h-3 overflow-hidden">
                          <div 
                            className={`h-full transition-all duration-500 ${
                              opponent.winRate >= 50 ? 'bg-gradient-to-r from-green-400 to-green-600' : 'bg-gradient-to-r from-red-400 to-red-600'
                            }`}
                            style={{ width: `${opponent.winRate}%` }}
                          ></div>
                        </div>
                        <span className="text-xs text-gray-600 w-12">{opponent.winRate}%</span>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {searchQuery && searchResults.length === 0 && !searchLoading && (
                <div className="text-center py-8">
                  <div className="text-4xl mb-4">ü§∑‚Äç‚ôÄÔ∏è</div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§</h3>
                  <p className="text-gray-600">Îã§Î•∏ Ïù¥Î¶ÑÏúºÎ°ú Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî.</p>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº */}
      <div className="text-center">
        <Button 
          onClick={() => {
            fetchMatchHistory();
            fetchRankings();
          }} 
          disabled={loading}
          variant="outline"
        >
          {loading ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2"></div>
              ÏÉàÎ°úÍ≥†Ïπ® Ï§ë...
            </>
          ) : (
            'üîÑ ÏÉàÎ°úÍ≥†Ïπ®'
          )}
        </Button>
      </div>
    </div>
  );
}
